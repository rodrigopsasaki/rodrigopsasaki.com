---
import { getLangFromUrl, getAlternateLanguageLinks, useTranslations, isMultiLanguage } from '../i18n';

// Don't render anything if only one language is enabled
if (!isMultiLanguage) {
  return null;
}

const currentLang = getLangFromUrl(Astro.url);
const t = useTranslations(currentLang);
const alternateLinks = getAlternateLanguageLinks(Astro.url.pathname);
---

<div class="relative inline-block text-left">
  <button
    type="button"
    class="inline-flex items-center justify-center rounded-md px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
    id="language-menu-button"
    aria-expanded="false"
    aria-haspopup="true"
    title={t.language.toggle}
  >
    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M7 2a1 1 0 011 1v1h3a1 1 0 110 2H9.578a18.87 18.87 0 01-1.724 4.78c.29.354.596.696.914 1.026a1 1 0 11-1.44 1.389c-.188-.196-.373-.396-.554-.6a19.098 19.098 0 01-3.107 3.567 1 1 0 01-1.334-1.49 17.087 17.087 0 003.13-3.733 18.992 18.992 0 01-1.487-2.494 1 1 0 111.79-.89c.234.47.489.928.764 1.372.417-.934.752-1.913.997-2.927H3a1 1 0 110-2h3V3a1 1 0 011-1zm6 6a1 1 0 01.894.553l2.991 5.982a.869.869 0 01.02.037l.99 1.98a1 1 0 11-1.79.895L15.383 16h-4.764l-.724 1.447a1 1 0 11-1.788-.894l.99-1.98.019-.038 2.99-5.982A1 1 0 0113 8zm-1.382 6h2.764L13 11.236 11.618 14z" clip-rule="evenodd" />
    </svg>
    <span class="ml-2">{currentLang === 'en' ? 'EN' : 'PT'}</span>
  </button>

  <div
    class="absolute right-0 z-10 mt-2 w-32 origin-top-right rounded-md bg-white dark:bg-gray-800 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none hidden"
    id="language-menu"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-menu-button"
    tabindex="-1"
  >
    <div class="py-1" role="none">
      {alternateLinks.map((link) => (
        <a
          href={link.href}
          class={`block px-4 py-2 text-sm ${
            link.lang === currentLang
              ? 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-gray-100'
              : 'text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700'
          }`}
          role="menuitem"
          tabindex="-1"
        >
          {link.label}
        </a>
      ))}
    </div>
  </div>
</div>

<script>
  const button = document.getElementById('language-menu-button');
  const menu = document.getElementById('language-menu');

  if (button && menu) {
    button.addEventListener('click', () => {
      const expanded = button.getAttribute('aria-expanded') === 'true';
      button.setAttribute('aria-expanded', String(!expanded));
      menu.classList.toggle('hidden');
    });

    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
      if (!button.contains(event.target as Node) && !menu.contains(event.target as Node)) {
        button.setAttribute('aria-expanded', 'false');
        menu.classList.add('hidden');
      }
    });
  }
</script>