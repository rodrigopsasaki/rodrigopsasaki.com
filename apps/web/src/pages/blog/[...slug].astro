---
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogSeriesNavigation from '../../components/BlogSeriesNavigation.astro';
import BlogBreadcrumbs from '../../components/BlogBreadcrumbs.astro';
import { getLangFromUrl, formatDate } from '../../i18n';
import { getLocalizedCollection } from '../../i18n/content';

export async function getStaticPaths() {
  const posts = await getLocalizedCollection('blog', 'en');
  return posts.map((post) => ({
    params: { slug: post.id.replace('.md', '') },
    props: post,
  }));
}

const lang = getLangFromUrl(Astro.url);
const post = Astro.props;
const { Content } = await post.render();

// Determine if this is part of a series
const isInSeries = post.data.series || post.id.includes('/');
let seriesName = post.data.series;
let parentPost = null;

if (post.id.includes('/') && !seriesName) {
  // Extract series name from path (e.g., "simplicity/episode-1.md" -> "simplicity")
  seriesName = post.id.split('/')[0];
}

// Get parent/series overview post if this is an episode
if (seriesName) {
  const allPosts = await getLocalizedCollection('blog', 'en');
  parentPost = allPosts.find(p => 
    p.id === `${seriesName}.md` || 
    (p.data.series === seriesName && !p.id.includes('/'))
  );
}

// Build breadcrumbs
type BreadcrumbItem = {
  label: string;
  href?: string;
};

const breadcrumbItems: BreadcrumbItem[] = [
  { label: 'Blog', href: '/blog/' }
];

if (isInSeries && seriesName) {
  breadcrumbItems.push({
    label: parentPost?.data.title || seriesName.charAt(0).toUpperCase() + seriesName.slice(1),
    href: `/blog/${seriesName}/`
  });
}

breadcrumbItems.push({
  label: post.data.title
  // No href for current page (last item)
});

// Find next/previous episodes for series navigation
let prevPost = null;
let nextPost = null;

if (isInSeries && seriesName) {
  const allPosts = await getLocalizedCollection('blog', 'en');
  const seriesPosts = allPosts
    .filter(p => p.data.series === seriesName || p.id.startsWith(seriesName + '/'))
    .sort((a, b) => (a.data.order || 0) - (b.data.order || 0));

  const currentIndex = seriesPosts.findIndex(p => p.id === post.id);
  if (currentIndex > 0) {
    prevPost = seriesPosts[currentIndex - 1];
  }
  if (currentIndex < seriesPosts.length - 1) {
    nextPost = seriesPosts[currentIndex + 1];
  }
}

// Calculate reading time (roughly 200 words per minute)
const wordCount = post.body.split(/\s+/).length;
const readingTime = Math.ceil(wordCount / 200);

// Prepare article metadata for SEO
const articleData = {
  publishedTime: new Date(post.data.date).toISOString(),
  modifiedTime: post.data.lastModified 
    ? new Date(post.data.lastModified).toISOString() 
    : new Date(post.data.date).toISOString(),
  author: post.data.author || 'Rodrigo Sasaki',
  tags: post.data.tags || []
};

// Generate structured data for rich snippets
const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": post.data.title,
  "description": post.data.description,
  "author": {
    "@type": "Person",
    "name": articleData.author,
    "url": "https://rodrigopsasaki.com"
  },
  "datePublished": articleData.publishedTime,
  "dateModified": articleData.modifiedTime,
  "publisher": {
    "@type": "Person",
    "name": "Rodrigo Sasaki",
    "url": "https://rodrigopsasaki.com"
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": Astro.url
  },
  "keywords": articleData.tags.join(", "),
  "articleSection": "Technology",
  "wordCount": wordCount,
  "timeRequired": `PT${readingTime}M`
};
---

<BaseLayout 
  title={post.data.title} 
  description={post.data.description}
  article={articleData}
>
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
  <div class="min-h-screen bg-gray-50 dark:bg-monokai-bg">
    <div class={isInSeries ? "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12" : "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12"}>
{isInSeries && (
        <!-- Mobile navigation (visible on mobile only) -->
        <div class="lg:hidden mb-8">
          <BlogBreadcrumbs items={breadcrumbItems} />
          <BlogSeriesNavigation 
            currentPath={Astro.url.pathname}
            seriesName={seriesName}
          />
        </div>
      )}
      
      <div class={isInSeries ? "flex gap-8 lg:gap-12" : ""}>
{isInSeries && (
          <!-- Sidebar with navigation -->
          <aside class="hidden lg:block lg:w-64 xl:w-72 flex-shrink-0">
            <div class="sticky top-24 h-[calc(100vh-8rem)] flex flex-col space-y-4">
              <!-- Series Navigation -->
              <BlogSeriesNavigation 
                currentPath={Astro.url.pathname}
                seriesName={seriesName}
              />
            </div>
          </aside>
        )}
        
        <!-- Main content -->
        <main class={isInSeries ? "flex-1 min-w-0" : ""}>
          <article>
      {isInSeries && (
        <!-- Desktop breadcrumb -->
        <div class="hidden lg:block">
          <BlogBreadcrumbs items={breadcrumbItems} />
        </div>
      )}
      
      <!-- Header Section -->
      <header class="mb-12">
        <h1 class="text-4xl md:text-5xl font-bold mb-4 text-gray-800 dark:text-monokai-text">
          {post.data.title}
        </h1>
        <p class="text-xl md:text-2xl text-gray-600 dark:text-monokai-muted mb-6 leading-relaxed">
          {post.data.description}
        </p>
        
        <!-- Date, Reading Time and Tags -->
        <div class="flex flex-col sm:flex-row sm:items-center gap-4 mb-6">
          <div class="flex items-center gap-4 text-gray-500 dark:text-monokai-muted">
            <time>
              {formatDate(post.data.date, lang)}
            </time>
            <span>â€¢</span>
            <span>{readingTime} min read</span>
          </div>
          
          <div class="flex flex-wrap gap-2">
            {post.data.tags.map((tag) => (
              <span class="text-xs px-3 py-1 bg-primary-100 dark:bg-monokai-surface text-primary-700 dark:text-monokai-yellow rounded-full font-medium">
                {tag}
              </span>
            ))}
          </div>
        </div>
      </header>

      <!-- Content Section with Tailwind Typography -->
      <div class="prose prose-lg prose-gray dark:prose-invert max-w-none 
                  prose-headings:text-gray-800 dark:prose-headings:text-monokai-text
                  prose-h2:border-b prose-h2:border-gray-200 dark:prose-h2:border-monokai-border prose-h2:pb-2
                  prose-h3:text-primary-700 dark:prose-h3:text-monokai-yellow
                  prose-h4:text-primary-600 dark:prose-h4:text-monokai-orange
                  prose-a:text-primary-600 dark:prose-a:text-monokai-blue 
                  prose-a:no-underline hover:prose-a:underline
                  prose-strong:text-gray-800 dark:prose-strong:text-monokai-text
                  prose-code:bg-gray-100 dark:prose-code:bg-monokai-surface 
                  prose-code:text-gray-800 dark:prose-code:text-monokai-green
                  prose-code:px-2 prose-code:py-1 prose-code:rounded prose-code:font-mono prose-code:text-sm
                  prose-blockquote:border-l-primary-600 dark:prose-blockquote:border-l-monokai-orange
                  prose-blockquote:text-gray-600 dark:prose-blockquote:text-monokai-muted
                  prose-th:bg-gray-100 dark:prose-th:bg-monokai-surface
                  prose-th:text-gray-800 dark:prose-th:text-monokai-text
                  prose-td:border-gray-300 dark:prose-td:border-monokai-border
                  prose-hr:border-gray-300 dark:prose-hr:border-monokai-border">
        <Content />
      </div>
      
      <!-- Series navigation at bottom -->
      {isInSeries && (prevPost || nextPost) && (
        <div class="mt-12 pt-8 border-t border-gray-200 dark:border-monokai-border">
          <div class="flex justify-between items-center">
            {prevPost && (
              <a 
                href={`/blog/${prevPost.id.replace('.md', '')}/`}
                class="flex items-center space-x-2 text-primary-600 dark:text-monokai-blue hover:underline"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                </svg>
                <div class="text-left">
                  <div class="text-sm text-gray-500 dark:text-monokai-muted">Previous</div>
                  <div class="font-medium">{prevPost.data.title}</div>
                </div>
              </a>
            )}
            
            {!prevPost && (<div></div>)}
            
            {nextPost && (
              <a 
                href={`/blog/${nextPost.id.replace('.md', '')}/`}
                class="flex items-center space-x-2 text-primary-600 dark:text-monokai-blue hover:underline text-right"
              >
                <div>
                  <div class="text-sm text-gray-500 dark:text-monokai-muted">Next</div>
                  <div class="font-medium">{nextPost.data.title}</div>
                </div>
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </a>
            )}
            
            {!nextPost && (<div></div>)}
          </div>
        </div>
      )}
          </article>
        </main>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  /* Fix code block rendering issues */
  .prose :global(pre) {
    @apply bg-gray-100 dark:bg-monokai-surface border border-gray-200 dark:border-monokai-border rounded-lg p-4 overflow-x-auto my-6;
    font-family: 'JetBrains Mono', 'Consolas', 'Monaco', 'Courier New', monospace !important;
    line-height: 1.5 !important;
    white-space: pre !important;
    transform: none !important;
    text-rendering: auto !important;
    -webkit-font-smoothing: antialiased !important;
    -moz-osx-font-smoothing: grayscale !important;
  }
  
  .prose :global(pre code) {
    @apply bg-transparent text-gray-800 dark:text-monokai-text px-0 py-0 rounded-none;
    font-family: inherit !important;
    font-size: 0.875rem !important;
    line-height: inherit !important;
    white-space: inherit !important;
    transform: none !important;
    display: block !important;
    overflow: visible !important;
  }
  
  /* Ensure proper code rendering */
  .prose :global(code) {
    font-variant-ligatures: none !important;
    text-rendering: optimizeLegibility !important;
    -webkit-font-feature-settings: normal !important;
    font-feature-settings: normal !important;
  }
  
  /* Fix any potential transform issues */
  .prose :global(pre),
  .prose :global(pre code),
  .prose :global(code) {
    transform: none !important;
    -webkit-transform: none !important;
    -moz-transform: none !important;
    -ms-transform: none !important;
    -o-transform: none !important;
  }

  /* Smooth scroll behavior */
  html {
    scroll-behavior: smooth;
  }
  
  /* Proper heading spacing */
  .prose :global(h2),
  .prose :global(h3),
  .prose :global(h4) {
    scroll-margin-top: 120px; /* Account for sticky header */
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function(): void {
    // Make all links in blog content open in new tabs
    const contentLinks = document.querySelectorAll('.prose a');
    
    contentLinks.forEach((link: Element): void => {
      // Skip if it's already configured or is an anchor link
      if (link.hasAttribute('target') || link.getAttribute('href')?.startsWith('#')) {
        return;
      }
      
      // Add target="_blank" and security attributes
      link.setAttribute('target', '_blank');
      link.setAttribute('rel', 'noopener noreferrer');
    });
  });
</script>