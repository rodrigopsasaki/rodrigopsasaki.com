---
// Magical search bar for navigation with proper highlighting, suggestions, and keyboard navigation
---

<div class="magical-search-container relative" id="magical-search-container">
  <!-- Search Input -->
  <div class="relative">
    <input
      type="text"
      id="magical-search-input"
      placeholder="Press / to search..."
      class="w-32 sm:w-40 lg:w-48 px-3 py-1.5 pl-8 text-sm bg-gray-100 dark:bg-monokai-surface border border-gray-200 dark:border-monokai-border rounded-lg
             text-gray-800 dark:text-monokai-text placeholder-gray-500 dark:placeholder-monokai-muted
             focus:outline-none focus:ring-2 focus:ring-primary-500 dark:focus:ring-monokai-blue focus:border-transparent focus:w-56 lg:focus:w-64
             transition-all duration-300 ease-out"
    />
    <div class="absolute inset-y-0 left-0 flex items-center pl-2 pointer-events-none">
      <svg class="w-4 h-4 text-gray-400 dark:text-monokai-muted transition-colors duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
    </div>
    <div class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
      <kbd class="hidden sm:inline-flex items-center px-1.5 py-0.5 text-xs font-mono text-gray-400 dark:text-monokai-muted bg-gray-200 dark:bg-monokai-border rounded border border-gray-300 dark:border-monokai-border">/</kbd>
    </div>
  </div>

  <!-- Search Results Dropdown -->
  <div id="magical-search-results" class="hidden absolute top-full right-0 left-0 mt-2 w-auto min-w-96 bg-white dark:bg-monokai-surface border border-gray-200 dark:border-monokai-border rounded-xl shadow-2xl z-50 overflow-hidden backdrop-blur-sm">
    
    <!-- Search Suggestions (empty state) -->
    <div id="magical-search-suggestions" class="py-3">
      <div class="px-4 pb-2">
        <div class="text-xs font-semibold text-gray-500 dark:text-monokai-muted uppercase tracking-wide mb-2">Try searching for</div>
        <div class="flex flex-wrap gap-2">
          <button class="search-suggestion text-xs px-2 py-1 bg-gray-100 dark:bg-monokai-border text-gray-600 dark:text-monokai-muted rounded-full hover:bg-primary-100 dark:hover:bg-monokai-surface hover:text-primary-700 dark:hover:text-monokai-blue transition-all duration-150" data-query="TypeScript">
            TypeScript
          </button>
          <button class="search-suggestion text-xs px-2 py-1 bg-gray-100 dark:bg-monokai-border text-gray-600 dark:text-monokai-muted rounded-full hover:bg-primary-100 dark:hover:bg-monokai-surface hover:text-primary-700 dark:hover:text-monokai-blue transition-all duration-150" data-query="experience">
            experience
          </button>
          <button class="search-suggestion text-xs px-2 py-1 bg-gray-100 dark:bg-monokai-border text-gray-600 dark:text-monokai-muted rounded-full hover:bg-primary-100 dark:hover:bg-monokai-surface hover:text-primary-700 dark:hover:text-monokai-blue transition-all duration-150" data-query="Vision">
            Vision
          </button>
          <button class="search-suggestion text-xs px-2 py-1 bg-gray-100 dark:bg-monokai-border text-gray-600 dark:text-monokai-muted rounded-full hover:bg-primary-100 dark:hover:bg-monokai-surface hover:text-primary-700 dark:hover:text-monokai-blue transition-all duration-150" data-query="Node.js">
            Node.js
          </button>
          <button class="search-suggestion text-xs px-2 py-1 bg-gray-100 dark:bg-monokai-border text-gray-600 dark:text-monokai-muted rounded-full hover:bg-primary-100 dark:hover:bg-monokai-surface hover:text-primary-700 dark:hover:text-monokai-blue transition-all duration-150" data-query="observability">
            observability
          </button>
        </div>
      </div>
      
      <!-- Recent searches -->
      <div id="recent-searches-section" class="hidden border-t border-gray-100 dark:border-monokai-border pt-3 px-4">
        <div class="text-xs font-semibold text-gray-500 dark:text-monokai-muted uppercase tracking-wide mb-2">Recent searches</div>
        <div id="recent-searches-list" class="space-y-1"></div>
      </div>
    </div>
    
    <!-- Search Results -->
    <div id="magical-search-content" class="hidden max-h-80 overflow-y-auto">
      <!-- Results will be populated here -->
    </div>

    <!-- Footer -->
    <div class="border-t border-gray-100 dark:border-monokai-border px-4 py-2 bg-gray-50 dark:bg-monokai-border">
      <div class="flex items-center justify-between text-xs text-gray-500 dark:text-monokai-muted">
        <div class="flex items-center space-x-3">
          <div class="flex items-center space-x-1">
            <kbd class="px-1.5 py-0.5 bg-white dark:bg-monokai-surface border border-gray-200 dark:border-monokai-border rounded text-xs">↑↓</kbd>
            <span>navigate</span>
          </div>
          <div class="flex items-center space-x-1">
            <kbd class="px-1.5 py-0.5 bg-white dark:bg-monokai-surface border border-gray-200 dark:border-monokai-border rounded text-xs">↵</kbd>
            <span>select</span>
          </div>
          <div class="flex items-center space-x-1">
            <kbd class="px-1.5 py-0.5 bg-white dark:bg-monokai-surface border border-gray-200 dark:border-monokai-border rounded text-xs">esc</kbd>
            <span>close</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Loading indicator -->
  <div id="magical-search-loading" class="hidden absolute top-full right-0 left-0 mt-2 w-auto min-w-96 bg-white dark:bg-monokai-surface border border-gray-200 dark:border-monokai-border rounded-xl shadow-2xl z-50 p-6 text-center">
    <div class="flex items-center justify-center space-x-3 text-gray-500 dark:text-monokai-muted">
      <div class="relative">
        <div class="w-6 h-6 border-2 border-primary-200 dark:border-monokai-border rounded-full"></div>
        <div class="absolute top-0 left-0 w-6 h-6 border-2 border-transparent border-t-primary-600 dark:border-t-monokai-blue rounded-full animate-spin"></div>
      </div>
      <span class="text-sm font-medium">Searching...</span>
    </div>
  </div>
</div>

<script>
import type { SearchItem } from '../utils/search-index';
import Fuse, { type FuseResult } from 'fuse.js';


class MagicalSearchManager {
  private searchInput: HTMLInputElement;
  private searchResults: HTMLElement;
  private searchContent: HTMLElement;
  private searchSuggestions: HTMLElement;
  private searchLoading: HTMLElement;
  private searchContainer: HTMLElement;
  private recentSearchesSection: HTMLElement;
  private recentSearchesList: HTMLElement;
  
  private fuse: Fuse<SearchItem> | null = null;
  private searchData: SearchItem[] = [];
  private debounceTimer: number | null = null;
  private selectedIndex: number = -1;
  private currentResults: FuseResult<SearchItem>[] = [];
  private recentSearches: string[] = [];
  
  constructor() {
    this.searchInput = document.getElementById('magical-search-input') as HTMLInputElement;
    this.searchResults = document.getElementById('magical-search-results') as HTMLElement;
    this.searchContent = document.getElementById('magical-search-content') as HTMLElement;
    this.searchSuggestions = document.getElementById('magical-search-suggestions') as HTMLElement;
    this.searchLoading = document.getElementById('magical-search-loading') as HTMLElement;
    this.searchContainer = document.getElementById('magical-search-container') as HTMLElement;
    this.recentSearchesSection = document.getElementById('recent-searches-section') as HTMLElement;
    this.recentSearchesList = document.getElementById('recent-searches-list') as HTMLElement;
    
    if (this.searchInput) {
      this.init();
    }
  }
  
  async init() {
    await this.loadSearchData();
    this.loadRecentSearches();
    this.setupEventListeners();
    this.setupKeyboardShortcuts();
    this.updateRecentSearchesUI();
  }
  
  async loadSearchData() {
    try {
      const response = await fetch('/search-index.json');
      this.searchData = await response.json();
      
      this.fuse = new Fuse(this.searchData, {
        keys: [
          { name: 'title', weight: 0.7 },
          { name: 'description', weight: 0.3 },
          { name: 'tags', weight: 0.6 },
          { name: 'contentPreview', weight: 0.2 },
          { name: 'content', weight: 0.1 },
          { name: 'author', weight: 0.1 }
        ],
        threshold: 0.3,
        includeMatches: true,
        includeScore: true,
        minMatchCharLength: 2
      });
    } catch (error) {
      console.error('Failed to load search data:', error);
    }
  }
  
  loadRecentSearches() {
    const stored = localStorage.getItem('magical-search-recent');
    if (stored) {
      try {
        this.recentSearches = JSON.parse(stored);
      } catch {
        this.recentSearches = [];
      }
    }
  }
  
  saveRecentSearches() {
    localStorage.setItem('magical-search-recent', JSON.stringify(this.recentSearches));
  }
  
  addRecentSearch(query: string) {
    if (!query.trim() || query.length < 2) return;
    
    // Remove if already exists
    this.recentSearches = this.recentSearches.filter(s => s !== query);
    // Add to front
    this.recentSearches.unshift(query);
    // Keep only last 5
    this.recentSearches = this.recentSearches.slice(0, 5);
    
    this.saveRecentSearches();
    this.updateRecentSearchesUI();
  }
  
  updateRecentSearchesUI() {
    if (this.recentSearches.length === 0) {
      this.recentSearchesSection.classList.add('hidden');
      return;
    }
    
    this.recentSearchesSection.classList.remove('hidden');
    this.recentSearchesList.innerHTML = this.recentSearches.map(query => `
      <button class="recent-search w-full text-left px-2 py-1 text-sm text-gray-600 dark:text-monokai-muted hover:bg-gray-100 dark:hover:bg-monokai-border rounded transition-colors duration-150" data-query="${this.escapeHtml(query)}">
        <svg class="inline w-3 h-3 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        ${this.escapeHtml(query)}
      </button>
    `).join('');
  }
  
  setupEventListeners() {
    // Search input events
    this.searchInput.addEventListener('input', () => {
      if (this.debounceTimer) clearTimeout(this.debounceTimer);
      this.debounceTimer = window.setTimeout(() => this.performSearch(), 200);
    });
    
    this.searchInput.addEventListener('focus', () => {
      this.showResults();
      if (this.searchInput.value.trim()) {
        this.performSearch();
      }
    });
    
    // Suggestion and recent search clicks
    document.addEventListener('click', (e) => {
      const suggestion = (e.target as Element).closest('.search-suggestion, .recent-search') as HTMLButtonElement;
      if (suggestion) {
        const query = suggestion.dataset.query;
        if (query) {
          this.searchInput.value = query;
          this.performSearch();
          this.searchInput.focus();
        }
      }
    });
    
    // Click outside to close
    document.addEventListener('click', (e) => {
      if (!this.searchContainer.contains(e.target as Node)) {
        this.hideResults();
        this.resetSelection();
      }
    });
    
    // Keyboard navigation
    this.searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        this.navigateResults(1);
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        this.navigateResults(-1);
      } else if (e.key === 'Enter') {
        e.preventDefault();
        if (this.selectedIndex >= 0 && this.currentResults[this.selectedIndex]) {
          const result = this.currentResults[this.selectedIndex];
          this.addRecentSearch(this.searchInput.value);
          window.location.href = result.item.url;
        } else if (this.currentResults.length > 0) {
          this.addRecentSearch(this.searchInput.value);
          window.location.href = this.currentResults[0].item.url;
        }
      } else if (e.key === 'Escape') {
        this.hideResults();
        this.searchInput.blur();
        this.resetSelection();
      }
    });
  }
  
  setupKeyboardShortcuts() {
    document.addEventListener('keydown', (e) => {
      // Focus search with '/' key
      if (e.key === '/' && !this.isInputFocused()) {
        e.preventDefault();
        this.searchInput.focus();
        this.showResults();
      }
      
      // Close with Escape when search is focused
      if (e.key === 'Escape' && document.activeElement === this.searchInput) {
        this.hideResults();
        this.searchInput.blur();
        this.resetSelection();
      }
    });
  }
  
  isInputFocused(): boolean {
    const activeElement = document.activeElement;
    return activeElement instanceof HTMLInputElement || 
           activeElement instanceof HTMLTextAreaElement || 
           (activeElement !== null && activeElement.getAttribute('contenteditable') === 'true');
  }
  
  navigateResults(direction: number) {
    if (this.currentResults.length === 0) {
      return;
    }
    
    
    // Handle first navigation from -1
    if (this.selectedIndex === -1) {
      this.selectedIndex = direction > 0 ? 0 : this.currentResults.length - 1;
    } else {
      // Normal navigation
      this.selectedIndex += direction;
      
      // Wrap around bounds
      if (this.selectedIndex < 0) {
        this.selectedIndex = this.currentResults.length - 1;
      } else if (this.selectedIndex >= this.currentResults.length) {
        this.selectedIndex = 0;
      }
    }
    
    
    // Update visual selection
    this.updateSelection();
  }
  
  updateSelection() {
    const resultElements = this.searchContent.querySelectorAll('.search-result');
    
    
    const containerRect = this.searchContent.getBoundingClientRect();
    
    resultElements.forEach((element, index) => {
      
      if (index === this.selectedIndex) {
        element.classList.add('selected');
        
        
        
        // Apply inline styles directly since Astro scoped styles don't work on dynamic content
        const htmlElement = element as HTMLElement;
        htmlElement.style.backgroundColor = 'rgb(248, 250, 252)';
        htmlElement.style.borderLeft = '3px solid rgb(148, 163, 184)';
        htmlElement.style.transform = 'translateX(2px)';
        htmlElement.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.08)';
        
        const h3 = element.querySelector('h3') as HTMLElement;
        if (h3) {
          h3.style.color = 'rgb(71, 85, 105)';
          h3.style.fontWeight = '600';
        }
        
        // Gentle scroll without interfering with navigation
        const elementRect = element.getBoundingClientRect();
        
        // Only scroll if element is not fully visible
        if (elementRect.top < containerRect.top || elementRect.bottom > containerRect.bottom) {
          setTimeout(() => {
            // Use scrollIntoView with block: 'nearest' to minimize movement
            element.scrollIntoView({ 
              block: 'nearest', 
              behavior: 'smooth' 
            });
          }, 50);
        }
      } else {
        element.classList.remove('selected');
        // Clear inline styles
        const htmlElement = element as HTMLElement;
        htmlElement.style.backgroundColor = '';
        htmlElement.style.borderLeft = '';
        htmlElement.style.transform = '';
        htmlElement.style.boxShadow = '';
        
        const h3 = element.querySelector('h3') as HTMLElement;
        if (h3) {
          h3.style.color = '';
          h3.style.fontWeight = '';
        }
        
      }
    });
    
  }
  
  resetSelection() {
    this.selectedIndex = -1;
    this.updateSelection();
  }
  
  async performSearch() {
    const query = this.searchInput.value.trim();
    
    if (!query) {
      this.showSuggestions();
      this.resetSelection();
      return;
    }
    
    if (!this.fuse) {
      this.showLoading();
      await this.loadSearchData();
      this.hideLoading();
      if (!this.fuse) return;
    }
    
    const results = this.fuse.search(query);
    
    this.currentResults = results.slice(0, 8);
    this.displayResults(this.currentResults);
  }
  
  displayResults(results: FuseResult<SearchItem>[]) {
    
    this.hideLoading();
    this.hideSuggestions();
    
    if (results.length === 0) {
      this.searchContent.innerHTML = `
        <div class="px-6 py-8 text-center">
          <svg class="mx-auto w-12 h-12 text-gray-300 dark:text-monokai-border mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 20.4a7.962 7.962 0 01-8-7.934c0-3.15 1.838-5.879 4.5-7.157"></path>
          </svg>
          <div class="text-sm text-gray-500 dark:text-monokai-muted mb-1">No results found</div>
          <div class="text-xs text-gray-400 dark:text-monokai-muted">Try a different search term</div>
        </div>
      `;
    } else {
      this.searchContent.innerHTML = results.map((result, index) => {
        const item = result.item;
        const categoryBadge = this.getCategoryBadge(item.category);
        const highlightedTitle = this.highlightMatches(item.title);
        const highlightedDescription = this.highlightMatches(item.contentPreview);
        
        return `
          <a href="${item.url}" class="search-result block px-4 py-3 hover:bg-gray-50 dark:hover:bg-monokai-border transition-all duration-200 group border-b border-gray-100 dark:border-monokai-border last:border-b-0" data-index="${index}">
            <div class="flex items-start justify-between gap-3">
              <div class="flex-1 min-w-0">
                <div class="flex items-center gap-2 mb-1 flex-wrap">
                  <h3 class="font-medium text-gray-900 dark:text-monokai-text group-hover:text-primary-600 dark:group-hover:text-monokai-blue transition-colors duration-200">
                    ${highlightedTitle}
                  </h3>
                  ${categoryBadge}
                </div>
                <p class="text-sm text-gray-600 dark:text-monokai-muted line-clamp-2 mb-2 leading-relaxed">
                  ${highlightedDescription}
                </p>
                ${item.tags.length > 0 ? `
                  <div class="flex flex-wrap gap-1">
                    ${item.tags.slice(0, 3).map(tag => `<span class="text-xs px-2 py-0.5 bg-gray-100 dark:bg-monokai-surface text-gray-600 dark:text-monokai-muted rounded-full">${this.escapeHtml(tag)}</span>`).join('')}
                    ${item.tags.length > 3 ? `<span class="text-xs text-gray-400 dark:text-monokai-muted">+${item.tags.length - 3}</span>` : ''}
                  </div>
                ` : ''}
              </div>
              <div class="flex-shrink-0 self-start mt-1">
                <svg class="w-4 h-4 text-gray-400 dark:text-monokai-muted group-hover:text-primary-500 dark:group-hover:text-monokai-blue transition-colors duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </div>
            </div>
          </a>
        `;
      }).join('');
      
      
    }
    
    // No stats display needed
    
    this.showResults();
    this.resetSelection();
  }
  
  getCategoryBadge(category?: string): string {
    const badges: Record<string, { color: string; label: string }> = {
      'cv': { color: 'bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300', label: 'CV' },
      'project': { color: 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300', label: 'Project' },
      'blog': { color: 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300', label: 'Blog' }
    };
    
    if (!category || !badges[category]) return '';
    
    const badge = badges[category];
    return `<span class="text-xs px-2 py-0.5 ${badge.color} rounded-full font-medium">${badge.label}</span>`;
  }
  
  highlightMatches(text: string): string {
    // For now, just return escaped HTML without highlighting to avoid issues
    // This ensures clean text without HTML artifacts
    return this.escapeHtml(text);
  }
  
  escapeHtml(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
  
  showResults() {
    this.searchResults.classList.remove('hidden');
    this.hideLoading();
  }
  
  hideResults() {
    this.searchResults.classList.add('hidden');
  }
  
  showSuggestions() {
    this.hideLoading();
    this.searchContent.classList.add('hidden');
    this.searchSuggestions.classList.remove('hidden');
    this.showResults();
  }
  
  hideSuggestions() {
    this.searchSuggestions.classList.add('hidden');
    this.searchContent.classList.remove('hidden');
  }
  
  showLoading() {
    this.searchLoading.classList.remove('hidden');
    this.hideResults();
  }
  
  hideLoading() {
    this.searchLoading.classList.add('hidden');
  }
}

// Initialize the search manager
document.addEventListener('DOMContentLoaded', () => {
  new MagicalSearchManager();
});

// Handle Astro page changes
document.addEventListener('astro:page-load', () => {
  new MagicalSearchManager();
});
</script>

<style>
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/* Search input focus expand animation */
#magical-search-input:focus {
  transform: translateX(-8px);
}

/* Selected result highlighting - high specificity */
#magical-search-content .search-result.selected {
  background-color: rgb(248 250 252) !important;
  border-left: 3px solid rgb(148 163 184) !important;
  transform: translateX(2px) !important;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08) !important;
}

.dark #magical-search-content .search-result.selected {
  background-color: rgb(39 39 42) !important;
  border-left: 3px solid rgb(100 116 139) !important;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15) !important;
}

#magical-search-content .search-result.selected h3 {
  color: rgb(71 85 105) !important;
  font-weight: 600 !important;
}

.dark #magical-search-content .search-result.selected h3 {
  color: rgb(148 163 184) !important;
  font-weight: 600 !important;
}

/* Fallback with even higher specificity */
div#magical-search-content a.search-result.selected {
  background: linear-gradient(90deg, rgb(248 250 252), rgb(249 250 251)) !important;
  border-left: 3px solid rgb(148 163 184) !important;
}

.dark div#magical-search-content a.search-result.selected {
  background: linear-gradient(90deg, rgb(39 39 42), rgb(32 32 35)) !important;
  border-left: 3px solid rgb(100 116 139) !important;
}

/* Smooth dropdown animation */
#magical-search-results {
  transform: translateY(-8px) scale(0.95);
  opacity: 0;
  transition: all 200ms cubic-bezier(0.16, 1, 0.3, 1);
}

#magical-search-results:not(.hidden) {
  transform: translateY(0) scale(1);
  opacity: 1;
}

/* Custom scrollbar */
#magical-search-content {
  scrollbar-width: thin;
  scrollbar-color: rgb(156 163 175) transparent;
}

#magical-search-content::-webkit-scrollbar {
  width: 6px;
}

#magical-search-content::-webkit-scrollbar-track {
  background: transparent;
}

#magical-search-content::-webkit-scrollbar-thumb {
  background-color: rgb(156 163 175);
  border-radius: 3px;
}

.dark #magical-search-content::-webkit-scrollbar-thumb {
  background-color: rgb(115 115 115);
}

/* Loading animation enhancement */
@keyframes shimmer {
  0% {
    background-position: -200px 0;
  }
  100% {
    background-position: calc(200px + 100%) 0;
  }
}

.animate-shimmer {
  background: linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.4) 50%, transparent 100%);
  background-size: 200px 100%;
  animation: shimmer 1.5s infinite;
}
</style>